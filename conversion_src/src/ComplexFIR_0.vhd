-- generated by pyha 0.0.6
library ieee;
    use ieee.std_logic_1164.all;
    use ieee.numeric_std.all;
    use ieee.fixed_float_types.all;
    use ieee.fixed_pkg.all;
    use ieee.math_real.all;

library work;
    use work.PyhaUtil.all;
    use work.Typedefs.all;
    use work.all;
    use work.ComplexSfix_0.all;
    use work.FIR_2.all;


package ComplexFIR_0 is
    type next_t is record
        fir: FIR_2.FIR_2_self_t_list_t(0 to 1);
        outreg: ComplexSfix_0.self_t;
        DELAY: integer;
        TAPS: Typedefs.sfixed0downto_17_list_t(0 to 7);
    end record;

    type self_t is record
        fir: FIR_2.FIR_2_self_t_list_t(0 to 1);
        outreg: ComplexSfix_0.self_t;
        DELAY: integer;
        TAPS: Typedefs.sfixed0downto_17_list_t(0 to 7);
        \next\: next_t;
    end record;
    type ComplexFIR_0_self_t_list_t is array (natural range <>) of ComplexFIR_0.self_t;

    procedure main(self:inout self_t; x: ComplexSfix_0.self_t; ret_0:out ComplexSfix_0.self_t);

    -- internal pyha functions
    procedure pyha_update_registers(self:inout self_t);
    procedure pyha_reset(self:inout self_t);
    procedure pyha_init_next(self:inout self_t);
    procedure pyha_reset_constants(self:inout self_t);
    procedure pyha_deepcopy(self:inout self_t; other: in self_t);
    procedure pyha_list_deepcopy(self:inout ComplexFIR_0_self_t_list_t; other: in ComplexFIR_0_self_t_list_t);
end package;

package body ComplexFIR_0 is
    procedure main(self:inout self_t; x: ComplexSfix_0.self_t; ret_0:out ComplexSfix_0.self_t) is

        variable pyha_ret_0: sfixed(0 downto -17);
        variable pyha_ret_1: sfixed(0 downto -17);
    begin
        -- out = x
        -- out.real = self.fir[0].main(x.real)
        -- out.imag = self.fir[1].main(x.imag)
        -- return out
        FIR_2.main(self.fir(0), x.real, pyha_ret_0);
        self.outreg.\next\.real := resize(pyha_ret_0, 0, -17, fixed_wrap, fixed_truncate);
        FIR_2.main(self.fir(1), x.imag, pyha_ret_1);
        self.outreg.\next\.imag := resize(pyha_ret_1, 0, -17, fixed_wrap, fixed_truncate);
        ret_0 := self.outreg;
        return;
    end procedure;

    procedure pyha_reset(self:inout self_t) is
        -- executed on reset signal. Reset values are determined from initial values of Python variables.
    begin
        self.fir(0).\next\.DELAY := 2;
        self.fir(0).\next\.TAPS := (Sfix(-0.040802001953125, 0, -17), Sfix(0.1103363037109375, 0, -17), Sfix(0.21150970458984375, 0, -17), Sfix(0.29248046875, 0, -17), Sfix(0.29248046875, 0, -17), Sfix(0.21150970458984375, 0, -17), Sfix(0.1103363037109375, 0, -17), Sfix(-0.040802001953125, 0, -17));
        self.fir(0).\next\.acc := (Sfix(0.0, 1, -34), Sfix(0.0, 1, -34), Sfix(0.0, 1, -34), Sfix(0.0, 1, -34), Sfix(0.0, 1, -34), Sfix(0.0, 1, -34), Sfix(0.0, 1, -34), Sfix(0.0, 1, -34));
        self.fir(0).\next\.\out\ := Sfix(0.0, 0, -17);
        self.fir(1).\next\.DELAY := 2;
        self.fir(1).\next\.TAPS := (Sfix(-0.040802001953125, 0, -17), Sfix(0.1103363037109375, 0, -17), Sfix(0.21150970458984375, 0, -17), Sfix(0.29248046875, 0, -17), Sfix(0.29248046875, 0, -17), Sfix(0.21150970458984375, 0, -17), Sfix(0.1103363037109375, 0, -17), Sfix(-0.040802001953125, 0, -17));
        self.fir(1).\next\.acc := (Sfix(0.0, 1, -34), Sfix(0.0, 1, -34), Sfix(0.0, 1, -34), Sfix(0.0, 1, -34), Sfix(0.0, 1, -34), Sfix(0.0, 1, -34), Sfix(0.0, 1, -34), Sfix(0.0, 1, -34));
        self.fir(1).\next\.\out\ := Sfix(0.0, 0, -17);
        self.outreg.\next\.real := Sfix(0.0, 0, -17);
        self.outreg.\next\.imag := Sfix(0.0, 0, -17);
        self.\next\.DELAY := 2;
        self.\next\.TAPS := (Sfix(-0.040802001953125, 0, -17), Sfix(0.1103363037109375, 0, -17), Sfix(0.21150970458984375, 0, -17), Sfix(0.29248046875, 0, -17), Sfix(0.29248046875, 0, -17), Sfix(0.21150970458984375, 0, -17), Sfix(0.1103363037109375, 0, -17), Sfix(-0.040802001953125, 0, -17));
        pyha_update_registers(self);
    end procedure;

    procedure pyha_update_registers(self:inout self_t) is
        -- loads 'next' values to registers, executed on clock rising edge
    begin
        FIR_2.pyha_update_registers(self.fir(0));
        FIR_2.pyha_update_registers(self.fir(1));
        ComplexSfix_0.pyha_update_registers(self.outreg);
    end procedure;

    procedure pyha_init_next(self:inout self_t) is
        -- sets all .next's to current register values, executed before 'main'. 
        -- thanks to this, '.next' variables are always written before read, so they can never be registers
    begin
        FIR_2.pyha_init_next(self.fir(0));
        FIR_2.pyha_init_next(self.fir(1));
        ComplexSfix_0.pyha_init_next(self.outreg);
        self.\next\.DELAY := self.DELAY;
        self.\next\.TAPS := self.TAPS;
    end procedure;

    procedure pyha_reset_constants(self:inout self_t) is
        -- reset CONSTANTS, executed before 'main'. Helps synthesis tools to determine constants.
    begin
        self.fir(0).DELAY := 2;
        self.fir(0).TAPS := (Sfix(-0.040802001953125, 0, -17), Sfix(0.1103363037109375, 0, -17), Sfix(0.21150970458984375, 0, -17), Sfix(0.29248046875, 0, -17), Sfix(0.29248046875, 0, -17), Sfix(0.21150970458984375, 0, -17), Sfix(0.1103363037109375, 0, -17), Sfix(-0.040802001953125, 0, -17));
        self.fir(1).DELAY := 2;
        self.fir(1).TAPS := (Sfix(-0.040802001953125, 0, -17), Sfix(0.1103363037109375, 0, -17), Sfix(0.21150970458984375, 0, -17), Sfix(0.29248046875, 0, -17), Sfix(0.29248046875, 0, -17), Sfix(0.21150970458984375, 0, -17), Sfix(0.1103363037109375, 0, -17), Sfix(-0.040802001953125, 0, -17));
        self.DELAY := 2;
        self.TAPS := (Sfix(-0.040802001953125, 0, -17), Sfix(0.1103363037109375, 0, -17), Sfix(0.21150970458984375, 0, -17), Sfix(0.29248046875, 0, -17), Sfix(0.29248046875, 0, -17), Sfix(0.21150970458984375, 0, -17), Sfix(0.1103363037109375, 0, -17), Sfix(-0.040802001953125, 0, -17));
    end procedure;

    procedure pyha_deepcopy(self:inout self_t; other: in self_t) is
        -- copy 'other' to 'self.next'. ':=' cannot be used as it would directly copy to 'self'
    begin
        self.fir(0).\next\.DELAY := other.fir(0).DELAY;
        self.fir(0).\next\.TAPS := other.fir(0).TAPS;
        self.fir(0).\next\.acc := other.fir(0).acc;
        self.fir(0).\next\.\out\ := other.fir(0).\out\;
        self.fir(1).\next\.DELAY := other.fir(1).DELAY;
        self.fir(1).\next\.TAPS := other.fir(1).TAPS;
        self.fir(1).\next\.acc := other.fir(1).acc;
        self.fir(1).\next\.\out\ := other.fir(1).\out\;
        self.outreg.\next\.real := other.outreg.real;
        self.outreg.\next\.imag := other.outreg.imag;
        self.\next\.DELAY := other.DELAY;
        self.\next\.TAPS := other.TAPS;
    end procedure;

    procedure pyha_list_deepcopy(self:inout ComplexFIR_0_self_t_list_t; other: in ComplexFIR_0_self_t_list_t) is
        -- run deepcopy for each list element
    begin
        for i in self'range loop
            pyha_deepcopy(self(i), other(i));
        end loop;
    end procedure;

end package body;
