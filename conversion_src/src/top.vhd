-- generated by pyha 0.0.6
library ieee;
    use ieee.std_logic_1164.all;
    use ieee.numeric_std.all;
    use ieee.fixed_pkg.all;
    use ieee.math_real.all;

library work;
    use work.PyhaUtil.all;
    use work.Typedefs.all;
    use work.all;

entity  top is
    port (
        clk, rst_n: in std_logic;

        -- look #153 if you want enable
        -- enable: in std_logic;

        -- inputs
        in0: in std_logic_vector(35 downto 0);

        -- outputs
        out0: out std_logic_vector(35 downto 0)
    );
end entity;

architecture arch of top is
    -- make reset procedure callable
    function init_regs return BasebandFilter_0.self_t is
        variable self: BasebandFilter_0.self_t;
    begin
          BasebandFilter_0.pyha_reset(self);
          return self;
    end function;

    signal self: BasebandFilter_0.self_t := init_regs;
begin
    process(clk, rst_n)
        variable self_var: BasebandFilter_0.self_t;
        -- input variables
        variable var_in0: ComplexSfix_0.self_t;

        --output variables
        variable var_out0: ComplexSfix_0.self_t;

    begin
        self_var := self;

        --convert slv to normal types
        var_in0.real := Sfix(in0(17 downto 0), 0, -17);
        var_in0.imag := Sfix(in0(35 downto 18), 0, -17);

        --call the main entry
        BasebandFilter_0.pyha_init_next(self_var);
        BasebandFilter_0.pyha_reset_constants(self_var);
        BasebandFilter_0.main(self_var, var_in0, ret_0=>var_out0);

        --convert normal types to slv
        out0(17 downto 0) <= to_slv(var_out0.real);
        out0(35 downto 18) <= to_slv(var_out0.imag);


        if (not rst_n) then
            BasebandFilter_0.pyha_reset(self_var);
            self <= self_var;
        elsif rising_edge(clk) then
            -- look #153 if you want enable
            --if enable then
                BasebandFilter_0.pyha_update_registers(self_var);
                self <= self_var;
            --end if;
        end if;

    end process;
end architecture;